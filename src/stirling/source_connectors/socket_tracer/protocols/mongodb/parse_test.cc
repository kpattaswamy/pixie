/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include "src/stirling/source_connectors/socket_tracer/protocols/mongodb/parse.h"

#include <string>
#include <utility>

#include "src/common/testing/testing.h"

namespace px {
namespace stirling {
namespace protocols {

// clang-format off

constexpr uint8_t mongoDBNeedMoreHeaderData[] = {
    // message length (4 bytes)
    0x00, 0x00, 0x00, 0x0c,
    // request id
    0x82, 0xb7, 0x31, 0x44,
    // response to
    0x00, 0x00, 0x00, 0x00,
    // op code (missing a byte)
    0xdd, 0x07, 0x00,
};

constexpr uint8_t mongoDBNeedMoreData[] = {
    // message length (18 bytes)
    0x12, 0x00, 0x00, 0x00,
    // request id
    0x82, 0xb7, 0x31, 0x44,
    // response to
    0x00, 0x00, 0x00, 0x00,
    // op code
    0xdd, 0x07, 0x00, 0x00,
    // flag bits (missing a byte)
    0x00,
};

constexpr uint8_t mongoDBInvalidType[] = {
    // message length (18 bytes)
    0x12, 0x00, 0x00, 0x00,
    // request id
    0x82, 0xb7, 0x31, 0x44,
    // response to
    0x00, 0x00, 0x00, 0x00,
    // op code (2010)
    0xda, 0x07, 0x00, 0x00,
    // flag bits
    0x00, 0x00
};

constexpr uint8_t mongoDBInvalidChecksum[] = {
    // message length (157 bytes)
    0x9d, 0x00, 0x00, 0x00,
    // request id
    0x82, 0xb7, 0x31, 0x44,
    // response to
    0x00, 0x00, 0x00, 0x00,
    // op code (2013)
    0xdd, 0x07, 0x00, 0x00,
    // flag bits (checksum set)
    0x01, 0x00, 0x00, 0x00, 
    // section 1
    0x00, 0x52, 0x00, 0x00, 0x00, 0x02, 0x69, 0x6e, 0x73, 0x65, 0x72, 
    0x74, 0x00, 0x04, 0x00, 0x00, 0x00, 0x63, 0x61, 0x72, 0x00, 0x08, 
    0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x00, 0x01, 0x03, 0x6c, 
    0x73, 0x69, 0x64, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x05, 0x69, 0x64, 
    0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x0e, 0xab, 0xf5, 0xe5, 0x45, 
    0xf8, 0x42, 0x5f, 0x8c, 0xb5, 0xb4, 0x0d, 0xff, 0x94, 0x8e, 0x1c, 
    0x00, 0x02, 0x24, 0x64, 0x62, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6d, 
    0x79, 0x64, 0x62, 0x31, 0x00, 0x00,
    // section 2
    0x01, 0x35, 0x00, 0x00 ,0x00, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
    0x6e, 0x74, 0x73, 0x00, 0x27, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69,
    0x64, 0x00, 0x64, 0xdb, 0xd4, 0x67, 0x8f, 0x0e, 0x65, 0x5d, 0x43,
    0x14, 0xd6, 0x8a, 0x02, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x34, 0x00, 0x00,
    // checksum bytes missing
};

constexpr uint8_t mongoDBValidRequest[] = {
    // message length (157 bytes)
    0x9d, 0x00, 0x00, 0x00,
    // request id
    0x82, 0xb7, 0x31, 0x44,
    // response to
    0x00, 0x00, 0x00, 0x00,
    // op code (2013)
    0xdd, 0x07, 0x00, 0x00,
    // flag bits
    0x00, 0x00, 0x00, 0x00, 
    // section 1
    0x00, 0x52, 0x00, 0x00, 0x00, 0x02, 0x69, 0x6e, 0x73, 0x65, 0x72, 
    0x74, 0x00, 0x04, 0x00, 0x00, 0x00, 0x63, 0x61, 0x72, 0x00, 0x08, 
    0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x00, 0x01, 0x03, 0x6c, 
    0x73, 0x69, 0x64, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x05, 0x69, 0x64, 
    0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x0e, 0xab, 0xf5, 0xe5, 0x45, 
    0xf8, 0x42, 0x5f, 0x8c, 0xb5, 0xb4, 0x0d, 0xff, 0x94, 0x8e, 0x1c, 
    0x00, 0x02, 0x24, 0x64, 0x62, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6d, 
    0x79, 0x64, 0x62, 0x31, 0x00, 0x00,
    // section 2
    0x01, 0x35, 0x00, 0x00 ,0x00, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
    0x6e, 0x74, 0x73, 0x00, 0x27, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69,
    0x64, 0x00, 0x64, 0xdb, 0xd4, 0x67, 0x8f, 0x0e, 0x65, 0x5d, 0x43,
    0x14, 0xd6, 0x8a, 0x02, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x34, 0x00, 0x00,
};
// clang-format on

class MongoDBParserTest : public ::testing::Test {};

TEST_F(MongoDBParserTest, ParseFrameWhenNeedsMoreHeaderData) {
  auto frame_view = CreateStringView<char>(CharArrayStringView<uint8_t>(mongoDBNeedMoreHeaderData));

  mongodb::Frame frame;
  ParseState state = ParseFrame(message_type_t::kRequest, &frame_view, &frame);

  ASSERT_EQ(state, ParseState::kNeedsMoreData);
}

TEST_F(MongoDBParserTest, ParseFrameWhenNeedsMoreData) {
  auto frame_view = CreateStringView<char>(CharArrayStringView<uint8_t>(mongoDBNeedMoreData));

  mongodb::Frame frame;
  ParseState state = ParseFrame(message_type_t::kRequest, &frame_view, &frame);

  ASSERT_EQ(state, ParseState::kNeedsMoreData);
}

TEST_F(MongoDBParserTest, ParseFrameWhenNotValidMongoDBType) {
  auto frame_view = CreateStringView<char>(CharArrayStringView<uint8_t>(mongoDBInvalidType));

  mongodb::Frame frame;
  ParseState state = ParseFrame(message_type_t::kRequest, &frame_view, &frame);

  ASSERT_EQ(state, ParseState::kInvalid);
}

TEST_F(MongoDBParserTest, ParseFrameInvalidMongoDBChecksum) {
  auto frame_view = CreateStringView<char>(CharArrayStringView<uint8_t>(mongoDBInvalidChecksum));

  mongodb::Frame frame;
  ParseState state = ParseFrame(message_type_t::kRequest, &frame_view, &frame);

  ASSERT_EQ(state, ParseState::kInvalid);
}

TEST_F(MongoDBParserTest, ParseFrameValidMongoDBRequest) {
  auto frame_view = CreateStringView<char>(CharArrayStringView<uint8_t>(mongoDBValidRequest));

  mongodb::Frame frame;
  ParseState state = ParseFrame(message_type_t::kRequest, &frame_view, &frame);

  ASSERT_EQ(state, ParseState::kSuccess);
}

namespace mongodb {}  // namespace mongodb
}  // namespace protocols
}  // namespace stirling
}  // namespace px
